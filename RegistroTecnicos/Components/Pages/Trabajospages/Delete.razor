@page "/Trabajo/Delete/{TrabajoId:int}"
@inject TrabajoService trabajoService
@inject TecnicoService tecnicoService
@inject ClienteService clienteService
@inject PrioridadService prioridadService
@inject ArticuloService articuloService
@inject NavigationManager navigationManager
@inject ToastService toastService
@rendermode InteractiveServer

<PageTitle>Eliminar Trabajo</PageTitle>

<div class="container">
    <div class="card shadow-header">
        <div class="card-header bg-primary  text-white py-2 rounded">
            <h5 style="font-weight: bold;" class="font-weight-bold">Eliminar Trabajo</h5>
        </div>
        <div class="container">
            <div class="row">
                <div class="col-md-6">
                    <div class="card-body">
                        <ul class="list-unstyled">
                            <li><strong>TrabajoId:</strong> @trabajo.TrabajoId</li>
                            <li><strong>Fecha:</strong> @trabajo.Fecha.ToShortDateString()</li>
                            <li><strong>Cliente:</strong> @cliente.Nombres</li>
                            <li><strong>Técnico:</strong> @tecnico.Nombres</li>
                            <li><strong>Prioridad:</strong> @prioridad.Descripcion</li>
                            <li><strong>Descripción:</strong> @trabajo.Descripcion</li>
                            <li><strong>Monto:</strong> @trabajo.Monto</li>
                        </ul>
                    </div>
                </div>
            </div>

            <div class="card mt-6 border-success">
                <div class="card-header bg-primary text-white">
                    <h5 class="font-weight-bold">Detalles de artículos utilizados</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive mt-3">
                        <table class="table table-bordered text-center">
                            <thead class="bg-primary text-white">
                                <tr>
                                    <th>Artículo</th>
                                    <th>Cantidad</th>
                                    <th>Precio</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var detalle in listatrabajodetalle)
                                {
                                    var articulo = listaarticulo.FirstOrDefault(a => a.ArticuloId == detalle.ArticuloId);
                                    <tr>
                                        <td>@(articulo?.Descripcion ?? "Artículo no encontrado")</td>
                                        <td>@detalle.Cantidad</td>
                                        <td>@detalle.Precio.ToString("C")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div class="card-footer text-center">
                <button type="button" class="btn btn-outline-danger" @onclick="EliminarTrabajo">
                    <i class="bi bi-trash-fill"></i> Eliminar
                </button>
                <button type="button" class="btn btn-outline-primary" @onclick="Retroceder">
                    <i class="bi bi-box-arrow-left"></i> Retroceder
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int TrabajoId { get; set; }
    public Trabajos trabajo { get; set; } = new Trabajos();
    public List<TrabajosDetalle> listatrabajodetalle { get; set; } = new List<TrabajosDetalle>();
    public Articulos articulos { get; set; } = new Articulos();
    public List<Articulos> listaarticulo = new List<Articulos>();
    public TrabajosDetalle trabajosDetalle { get; set; } = new TrabajosDetalle();
    public Clientes cliente { get; set; } = new Clientes();
    public Tecnicos tecnico { get; set; } = new Tecnicos();
    public Prioridades prioridad { get; set; } = new Prioridades();

    protected override async Task OnInitializedAsync()
    {
        await CargarTrabajoYDetalles();
        trabajo = await trabajoService.Buscar(TrabajoId);
        listatrabajodetalle = await trabajoService.ListarDetalles(TrabajoId);
        listaarticulo = await trabajoService.ListarArticulos();
    }

    private async Task CargarTrabajoYDetalles()
    {
        trabajo = await trabajoService.Buscar(TrabajoId);

        if (trabajo != null)
        {
            cliente = trabajo.ClienteId.HasValue ? await clienteService.Buscar(trabajo.ClienteId.Value) : null;
            tecnico = trabajo.TecnicoId.HasValue ? await tecnicoService.Buscar(trabajo.TecnicoId.Value) : null;
            prioridad = trabajo.PrioridadId.HasValue ? await prioridadService.Buscar(trabajo.PrioridadId.Value) : null;
            listatrabajodetalle = await trabajoService.ObtenerDetalles(TrabajoId);
            listaarticulo = await trabajoService.ListarArticulos();
        }
    }

    public async Task EliminarTrabajo()
    {
        if (TrabajoId == 0 || trabajo == null)
        {
            return;
        }

        var detalles = await trabajoService.ListarDetalles(TrabajoId);

        if (await trabajoService.Eliminar(TrabajoId))
        {
            // Restaurar cantidades de los artículos
            foreach (var detalle in detalles)
            {
                await articuloService.AgregarCantidad(detalle.ArticuloId, detalle.Cantidad);
            }

            toastService.Notify(new(ToastType.Success,
            iconName: IconName.None,
            title: "Validación",
            helpText: "",
            message: "El trabajo se ha eliminado correctamente."));
            Retroceder();
        }
    }

    public async Task Retroceder()
    {
        navigationManager.NavigateTo("/Trabajo/Index");
    }
}
