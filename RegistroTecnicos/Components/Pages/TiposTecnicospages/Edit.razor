@page "/TipoTecnico/Edit"
@page "/TipoTecnico/Edit/{TipoTecnicoId:int}"
@inject TipoTecnicoService tipoTecnicoService
@inject NavigationManager navigationManager
@inject ToastService toastService
@rendermode InteractiveServer

<EditForm Model="tipostecnicos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg border-0" style="background-color white">

        <div class="card-header bg-primary text-center text-white py-2 rounded">
            <h3 style="font-weight: bold;" class="font-weight-bold">Modificar Tipo T&eacute;cnico</h3>
        </div>

        <div class="card-body">
            @*TipoTecnico*@
            <div class="mb-3">
                <label for="TecnicoId" class="form-label">TipoT&eacute;cnicoId:</label>
                <InputNumber @bind-Value="tipostecnicos.TipoTecnicoId" class="form-control" />
            </div>

            @*Descripcion*@
            <div class="mb-3">
                <label for="Descripcion" class="form-label">Descripci&oacute;n:</label>
                <InputText @bind-Value="tipostecnicos.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => tipostecnicos.Descripcion)" />
            </div>
        </div>

        <div class="card-footer d-flex justify-content-lg-center text-center">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span>Nuevo</button>
                <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-check-circle-fill"></span>Guardar</button>
                <button type="button" class="btn btn-outline-danger" @onclick="Retroceder"><span class="bi bi-arrow-bar-left"></span>Retroceder</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int TipoTecnicoId { get; set; }
    public TiposTecnicos? tipostecnicos { get; set; } = new TiposTecnicos();
    private bool existe = false;

    protected override async Task OnInitializedAsync()
    {
        tipostecnicos = await tipoTecnicoService.Buscar(TipoTecnicoId);
    }

    public async Task<bool> Validar()
    {
        var ListarTiposTecnicos = await tipoTecnicoService.Listar(t => t.Descripcion.ToLower() == tipostecnicos.Descripcion.ToLower() && tipostecnicos.TipoTecnicoId != TipoTecnicoId);
        return ListarTiposTecnicos.Count == 0;
    }

    public async Task Nuevo()
    {
        tipostecnicos = new TiposTecnicos();
        existe = false;
    }
    public async Task Buscar()
    {
        existe = false;
        var encontrado = await tipoTecnicoService.Buscar(tipostecnicos.TipoTecnicoId);
        if (encontrado != null)
        {
            tipostecnicos = encontrado;
        }
        else
        {
            Nuevo();
        }
    }

    public async Task Guardar()
    {
        if (!await Validar())
        {
            toastService.Notify(new(ToastType.Success,
           iconName: IconName.None,
           title: "Validacion",
           helpText: "",
           message: "Ya Existe un técnico con ese nombre en la consulta."));
            return;
        }
        var guardado = await tipoTecnicoService.Guardar(tipostecnicos);
        if (guardado)
        {
            toastService.Notify(new(ToastType.Success,
            iconName: IconName.None,
            title: "Guardado",
            helpText: "",
            message: "El tipo técnico se a modificado con exito."));
            Nuevo();
            Retroceder();
        }
    }
    public async Task Retroceder()
    {
        navigationManager.NavigateTo("/TipoTecnico/Index");
    }
}