@page "/Cliente/Edit/{ClienteId:int}"
@inject ClienteService clienteService
@inject NavigationManager navigationManager
@inject ToastService toastService
@rendermode InteractiveServer

<EditForm Model="clientes" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card-header bg-primary text-center text-white py-2 rounded">
        <h3 style="font-weight: bold;" class="font-weight-bold">Registro de Clientes</h3>
    </div>

    <div class="card-body">

        @*ClienteId*@
        <div class="mb-3">
            <label for="ClienteId" class="form-label">ClienteId:</label>
            <InputNumber @bind-Value="clientes.ClienteId" class="form-control" />
        </div>

        @*Nombres*@
        <div class="mb-3">
            <label for="Nombres" class="form-label">Nombres:</label>
            <InputText @bind-Value="clientes.Nombres" class="form-control" />
            <ValidationMessage For="@(() => clientes.Nombres)" />
        </div>

        @*WhatsApp*@
        <div class="mb-3">
            <label for="WhatsApp" class="form-label">WhatsApp:</label>
            <InputText @bind-Value="clientes.WhatsApp" class="form-control" />
            <ValidationMessage For="@(() => clientes.WhatsApp)" />
        </div>
    </div>

    <div class="card-footer d-flex justify-content-lg-center text-center">
        <div class="btn-group">
            <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span>Nuevo</button>
            <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-check-circle-fill"></span>Guardar</button>
            <button type="button" class="btn btn-outline-danger" @onclick="Retroceder"><span class="bi bi-arrow-bar-left"></span>Retroceder</button>
        </div>
    </div>

</EditForm>

@code {
    [Parameter]
    public int ClienteId { get; set; }
    public Clientes clientes { get; set; } = new Clientes();
    private bool Existe = false;

    protected override async Task OnInitializedAsync()
    {
        clientes = await clienteService.Buscar(ClienteId);
    }

    public async Task<bool> Validar()
    {
        var ListarCliente = await clienteService.Listar(c => c.Nombres.ToLower() == clientes.Nombres.ToLower() && clientes.ClienteId != ClienteId);
        return ListarCliente.Count == 0;
    }

    public async Task Nuevo()
    {
        clientes = new Clientes();
        Existe = false;
    }
  
    public async Task Guardar()
    {
        if (!await Validar())
        {
            return;
        }
        var guardado = await clienteService.Guardar(clientes);
        if (guardado)
        {
            Nuevo();
        }
    }
    public async Task Retroceder()
    {
        navigationManager.NavigateTo("/Cliente/Index");
    }
}